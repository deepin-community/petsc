# DMDAVecGetArrayDOFWrite
Returns a multiple dimension array that shares data with the underlying vector and is indexed using the global dimensions. 
## Synopsis
```
#include "petscdmda.h"   
PetscErrorCode DMDAVecGetArrayDOFWrite(DM da, Vec vec, void *array)
```
Not Collective


## Input Parameters

- ***da -*** the distributed array
- ***vec -*** the vector, either a vector the same size as one obtained with
`DMCreateGlobalVector()` or `DMCreateLocalVector()`



## Output Parameter

- ***array -*** the array



## Notes
Call `DMDAVecRestoreArrayDOFWrite()` once you have finished accessing the vector entries.

In C, the indexing is "backwards" from what expects: array[k][j][i][DOF] NOT array[i][j][k][DOF]!


## Fortran Noe
In Fortran you do not need a version of `DMDAVecRestoreArrayDOF()` just use  `DMDAVecRestoreArrayWriteF90()` and declare your array with one higher dimension,
see src/dm/tutorials/ex11f90.F




## See Also
 `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecRestoreArray()`, `DMDAVecGetArray()`, `DMDAVecGetArrayDOF()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`

## Level
intermediate

## Location
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/dm/impls/da/dagetarray.c.html#DMDAVecGetArrayDOFWrite">src/dm/impls/da/dagetarray.c</A>

## Examples
<A HREF="PETSC_DOC_OUT_ROOT_PLACEHOLDER/src/ksp/ksp/tutorials/ex34.c.html">src/ksp/ksp/tutorials/ex34.c.html</A><BR>


---
[Edit on GitLab](https://gitlab.com/petsc/petsc/-/edit/release/src/dm/impls/da/dagetarray.c)


[Index of all DMDA routines](index.md)  
[Table of Contents for all manual pages](/docs/manualpages/index.md)  
[Index of all manual pages](/docs/manualpages/singleindex.md)  
